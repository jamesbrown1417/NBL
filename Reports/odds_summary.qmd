---
title: "NBL Odds Screen"
execute:
    echo: false
    message: false
    warning: false
author: "James Brown"
date: "`r lubridate::now()`"
date-format: "dddd MMM D, YYYY - hh:mmA"
format:
    html:
        df-print: kable
        theme: cosmo
        self-contained: true
        toc: true
        toc-depth: 3
        fig-width: 16
        fig-height: 10
editor: visual
---

```{r}
#===============================================================================
# Libraries and functions
#===============================================================================

library(tidyverse)
library(DT)
`%notin%` <- Negate(`%in%`)

#===============================================================================
# Read in data
#===============================================================================

# Read in Data
list_of_files_props <-
    list.files("../Data/processed_odds", full.names = TRUE, pattern = "all")

head_to_head <- read_rds("../Data/processed_odds/head_to_head.rds")

# Read in all data - player props
all_odds <- 
  list_of_files_props |> 
  map_dfr(read_rds)

# Distinct Matches
all_matches <- 
  all_odds |> 
  distinct(match) |> 
    pull(match)

# Function to filter by match
filter_by_match <- function(m, df) {
  df |> 
    filter(match == m)
}
```

::: panel-tabset
## H2H

```{r}
head_to_head |> 
    select(-market_name) |> 
    arrange(match, desc(home_win)) |>
    datatable()
```

## Lines

```{r}
#| results: asis

all_lines <-
all_odds |> 
  arrange(match, player_name, market_name, line, desc(over_price)) |> 
    filter(!is.na(under_price)) |> 
    select(match, agency, player_name, market_name, line, over_price, under_price, diff_over_last_10, diff_under_last_10)

# Get a list where each match is the name of the filtered DF
filtered_list <- map(all_matches, filter_by_match, df = all_lines) |> 
  set_names(all_matches) |> 
    # keep if there are more than 1 row
    keep(~ nrow(.x) > 1) |> 
    map(~ datatable(.x))

# Use qreport to make tabset
qreport::maketabs(filtered_list, wide = TRUE)
```

## Alternative Lines (diff)

```{r}
#| results: asis

all_alt_lines <-
all_odds |> 
  arrange(match, player_name, market_name, line, desc(over_price)) |> 
    filter(is.na(under_price)) |> 
    group_by(match, player_name, market_name, line) |>
    mutate(number_of_markets = n()) |> 
    mutate(best_market_price = over_price == max(over_price, na.rm = TRUE)) |>
    mutate(next_best_diff = lead(1/over_price) - (1/over_price)) |>
    replace_na(list(next_best_diff = 0))

all_alt_lines_diff <-
    all_alt_lines |> 
    select(match, agency, player_name, market_name, line, over_price, diff_over_last_10)

# Get a list where each match is the name of the filtered DF
filtered_list_alt <- map(all_matches, filter_by_match, df = all_alt_lines_diff) |> 
  set_names(all_matches) |> 
    # keep if there are more than 1 row
    keep(~ nrow(.x) > 1) |> 
    map(~ datatable(.x))

# Use qreport to make tabset
qreport::maketabs(filtered_list_alt, wide = TRUE)
```

## Alternative Lines (outliers)

```{r}
#| results: asis

all_alt_lines_outliers <-
    all_alt_lines |> 
    filter(best_market_price) |> 
    mutate(next_best_diff = round(100 * next_best_diff, 2)) |>
    select(match, agency, player_name, market_name, line, over_price, number_of_markets, next_best_diff) |> 
    arrange(desc(next_best_diff))

# Get a list where each match is the name of the filtered DF
filtered_list_outliers <- map(all_matches, filter_by_match, df = all_alt_lines_outliers) |> 
  set_names(all_matches) |> 
    # keep if there are more than 1 row
    keep(~ nrow(.x) > 1) |> 
    map(~ datatable(.x))

# Use qreport to make tabset
qreport::maketabs(filtered_list_outliers, wide = TRUE)
```

## Arbs

```{r}
#===============================================================================
# Libraries and functions
#===============================================================================

library(tidyverse)
`%notin%` <- Negate(`%in%`)

# Read in Data
list_of_files <- list.files("../Data/processed_odds", full.names = TRUE)

# Read in all data
all_odds <- 
  list_of_files |> 
  map_dfr(read_rds)
```

```{r}
# Function to calculate arbitrage margins for different player markets
calculate_player_arbs <- function(all_odds, market_name) {
  # Filter by the specified market
  all_market_data <- all_odds |> 
    filter(market_name == !!market_name)
  
  # Only get overs
  all_market_overs <- all_market_data |> 
    filter(!is.na(over_price)) |> 
    select(match,market_name, player_name, player_team, opposition_team, over_line = line, over_price, over_agency = agency)
  
  # Only get unders
  all_market_unders <- all_market_data |> 
    filter(!is.na(under_price)) |> 
    select(match, market_name, player_name, player_team, opposition_team, under_line = line, under_price, under_agency = agency)
  
  # Merge overs and unders, then calculate margin
  all_market_arbs <- all_market_overs |>
    inner_join(all_market_unders, by = c("match", "market_name", "player_name", "player_team", "opposition_team")) |> 
    filter(over_agency != under_agency) |> 
    filter(over_line <= under_line) |>
    mutate(middle = under_line - over_line) |>
    mutate(margin = 1 / over_price + 1 / under_price) |> 
    mutate(margin = 1 - margin) |> 
    mutate(margin = round(100 * margin, 2)) |> 
    arrange(desc(margin))
  
  return(all_market_arbs)
}

# Applying the function to different markets
all_player_points_arbs <- calculate_player_arbs(all_odds, "Player Points")
all_player_assists_arbs <- calculate_player_arbs(all_odds, "Player Assists")
all_player_rebounds_arbs <- calculate_player_arbs(all_odds, "Player Rebounds")
all_player_threes_arbs <- calculate_player_arbs(all_odds, "Player Threes")
all_player_pras_arbs <- calculate_player_arbs(all_odds, "Player PRAs")

# Combining all arbs
all_arbs <- bind_rows(all_player_points_arbs, all_player_assists_arbs, all_player_rebounds_arbs, all_player_threes_arbs)

all_arbs |> 
    filter(margin > 0 | (margin > -10 & middle > 0)) |> 
    arrange(desc(margin))
```
:::
