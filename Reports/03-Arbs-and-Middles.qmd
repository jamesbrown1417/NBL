---
title: "Arbs and Middles"
execute:
    echo: false
    message: false
    warning: false
author: "James Brown"
date: "2024-09-27"
format:
    html:
        df-print: kable
        theme: cosmo
        self-contained: true
        toc: true
        toc-depth: 3
        fig-width: 8
        fig-height: 6
editor: visual
---

```{r}
#===============================================================================
# Libraries and functions
#===============================================================================

library(tidyverse)
`%notin%` <- Negate(`%in%`)

# Read in Data
list_of_files <- list.files("../Data/processed_odds", full.names = TRUE)

# Read in all data
all_odds <- 
  list_of_files |> 
  map_dfr(read_rds)
```

# Arbs

## Head to Head

```{r}
# All files
list_of_files <- list.files("../Data/scraped_odds", full.names = TRUE)

# Only H2H
h2h_files <- list_of_files |> 
  keep(~ str_detect(.x, "h2h"))

# Read in all data
all_h2h <- 
  h2h_files |> 
  map_dfr(read_csv)

# All home win
all_home_win <-
    all_h2h |> 
    select(-away_win, -margin) |> 
    rename(home_agency = agency)

# All away win
all_away_win <-
    all_h2h |> 
    select(-home_win, -margin) |> 
    rename(away_agency = agency)

# Merge
h2h_arbs <-
    inner_join(all_home_win, all_away_win) |> 
    mutate(margin = 1 / home_win + 1 / away_win) |>
    mutate(margin = 1 - margin) |>
    mutate(margin = round(100 * margin, 2)) |>
    filter(home_agency != away_agency) |>
    arrange(desc(margin))

h2h_arbs |> 
    filter(margin > 0)
```

## Player Props

```{r}
# Function to calculate arbitrage margins for different player markets
calculate_player_arbs <- function(all_odds, market_name) {
  # Filter by the specified market
  all_market_data <- all_odds |> 
    filter(market_name == !!market_name)
  
  # Only get overs
  all_market_overs <- all_market_data |> 
    filter(!is.na(over_price)) |> 
    select(match,market_name, player_name, player_team, opposition_team, line, over_price, over_agency = agency)
  
  # Only get unders
  all_market_unders <- all_market_data |> 
    filter(!is.na(under_price)) |> 
    select(match, market_name, player_name, player_team, opposition_team, line, under_price, under_agency = agency)
  
  # Merge overs and unders, then calculate margin
  all_market_arbs <- all_market_overs |>
    inner_join(all_market_unders, by = c("match", "market_name", "player_name", "player_team", "opposition_team", "line")) |> 
    filter(over_agency != under_agency) |> 
    mutate(margin = 1 / over_price + 1 / under_price) |> 
    mutate(margin = 1 - margin) |> 
    mutate(margin = round(100 * margin, 2)) |> 
    arrange(desc(margin))
  
  return(all_market_arbs)
}

# Applying the function to different markets
all_player_points_arbs <- calculate_player_arbs(all_odds, "Player Points")
all_player_assists_arbs <- calculate_player_arbs(all_odds, "Player Assists")
all_player_rebounds_arbs <- calculate_player_arbs(all_odds, "Player Rebounds")
all_player_threes_arbs <- calculate_player_arbs(all_odds, "Player Threes")

# Combining all arbs
all_arbs <- bind_rows(all_player_points_arbs, all_player_assists_arbs, all_player_rebounds_arbs, all_player_threes_arbs)

all_arbs |> 
    filter(margin > 0)
```

# Middles

```{r}
# Function to calculate middles for different player markets
calculate_player_middles <- function(all_odds, market_name) {
  # Filter by the specified market
  all_market_data <- all_odds |> 
    filter(market_name == !!market_name)
  
  # Only get overs
  all_market_overs <- all_market_data |> 
    filter(!is.na(over_price)) |> 
    select(match,market_name, player_name, player_team, opposition_team, over_line = line, over_price, over_agency = agency)
  
  # Only get unders
  all_market_unders <- all_market_data |> 
    filter(!is.na(under_price)) |> 
    select(match, market_name, player_name, player_team, opposition_team, under_line = line, under_price, under_agency = agency)
  
  # Merge overs and unders, then calculate middle
  all_market_middles <- all_market_overs |>
    inner_join(all_market_unders, by = c("match", "market_name", "player_name", "player_team", "opposition_team")) |> 
    filter(over_agency != under_agency) |> 
    filter(over_line < under_line) |> 
      mutate(margin = 1 / over_price + 1 / under_price) |>
      mutate(margin = 1 - margin) |>
      mutate(margin = round(100 * margin, 2)) |>
      mutate(middle_size = under_line - over_line) |>
      arrange(desc(margin))
  
  return(all_market_middles)
}

# Applying the function to different markets
all_player_points_middles <- calculate_player_middles(all_odds, "Player Points")
all_player_assists_middles <- calculate_player_middles(all_odds, "Player Assists")
all_player_rebounds_middles <- calculate_player_middles(all_odds, "Player Rebounds")
all_player_threes_middles <- calculate_player_middles(all_odds, "Player Threes")

# Combining all middles
all_middles <- bind_rows(all_player_points_middles, all_player_assists_middles, all_player_rebounds_middles, all_player_threes_middles)

all_middles
```
